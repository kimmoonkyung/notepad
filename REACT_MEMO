--react 설치
설치할 폴더로 이동하여 'create-react-app .'
. 은 현재경로

--샘플 실행
vscode terminal에서 'npm run start'
--종료
vscode terminal에서 'ctrl + c'

--bulid 실행 ( ** 공백 등 같은 불필요한 것들을 제거 하여 용량을 줄인다. -> 실제로 (서비스)배포시 빌드안에 있는 파일을 배포한다. 실서버 환경)
vscode terminal에서  'npm run build'

--npm으로 설치하는 간단한 웹 서버
'npm install -g serve'
-> 어디에서나 serve 명령어로 서버를 설치할 수 있다.
'npx serve -s build'
-> '-s build' 서브라는 웹서버를 받아서 실행시킬때 'build' 라는 생성한 디렉토리를 document 루트로 하겠다. 

--이것은 js 문법이 아니고, jsx 문법이다.
class App extends Component {
  render() {
    return (
      <div className="Subject">
        <Subject></Subject>
     </div>
    )
  }
}

--리액트 코드 작성시
import React, { Component } from 'react';
export default 'JS파일명'
는 필수로 적어야 된다고 생각하면 된다.

--Component 만드는 법.
1. function으로 생성
-> function App() {
    return (
        코드 작성
    )
}
2. class로 생성
-> class App extends Component {
    render() {
        return (
            코드 작성
        )
    }
}


--props
사용자가 컴포넌트를 사용하는 입장에서 중요한것 
function에서는 {this.props.xxx} 사용 안됨
çlass는 사용 가능. function에서는 어떻게 ?

* props are read only
* props can not be modified

--state
데이터를 갖다 쓰는 용도.

* state changes can be asynchronous
* state can be modified using this.setStae({  })
--setState
this.setState({
  mode : "welcome"
})


--key

--bind
.bind(this)

--Immutable
불변.
immutable.js

--router
React Router

--redux


--react server side rendering

------------------------------------------------------------------------------------------------------------------------------------------------------
  > 컴포넌트 이름은 대문자로 시작한다.

-- index.js 와 App.js의 의미


-- JSX 기본 규칙
  > 태그는 꼭 닫혀 있어야 한다.
  > 두개 이상의 태그는 하나로 감싸 있어져야 한다.
    ex) <div></div> <hello/> -> 에러, <div> <div></div> <hello/> </div> 로 해결. 또는 상위 div 대신 <> </>를 사용한다.
  > return 시 괄호는 없어도 된다.
  > jsx 내부에서 js 사용법
    const name = '짐승내'; -> <div>{name}</div>
  > style과 class 설정 방법
    1. style은 객체를 만들어 사용 한다. (속성은 카멜케이스로 작성)
      ex)   const style = {
              backgroundColor: 'rgba(0,0,0, 0.5)',
              color: 'aqua',
              fontSize: 24,
              padding: '1rem'
            };
      <div style={style}></div>
    2. class 는 className 으로 사용한다.
      ex) <div className="hihi"></div>
    3. 주석
      중괄호로 감싸서 사용한다.
      { /*  */ }
      html 코드 내에서는 //로 사용 가능하다.
      ex) <Hello> '// 주석' </Hello>

-- props (proerties 프로퍼티)
컴포넌트를 사용하게 될 때 특정 값의 전달이 필요할 때 사용
  > ex) 
    App.js
      function App() {
        return (
            <Hello name="react" color="aqua"/> --> 이것들이 props 다 name, color
        );
      }
    Hello.js
      /* function Hello(props) { */
      function Hello({color, name}) {
        console.log(props); // {name: react}
        /* return <div style={{color: props.color}}>안녕 나는 짐승내! {props.name} </div>; */
        return <div style={{color}}>안녕 나는 짐승내! {name} </div>;
        // 이런 식으로 사용도 가능하다
      }
    console.log(props);
  
  > defaultProps (기본값) 사용법
    Hello.js
    Hello.defaultProps = {
      name : "짐승균"
    }
    
    App.js
    return (
      <>
        <Hello name="react" color="red" /> name="react"
        <Hello color="black" /> // name="짐승균"으로 기본값이 들어간다.
      </>
    )

  > propsChildren (프롭스 칠드런)
  ex) App.js
      function App() {
        return (
          <Wrapper> ... </Wrapper>
        );
      }  
      Wrapper.js
      function Wrapper({ children }) {
          const style = {
              border: '2px solid black',
              padding: 16
          };
          return (
              <div style={style}>{children}</div>
          )
      }
  > 조건부 렌더링
  {isSpecial && <b>*</b>}

-- useState (동적 상태 관리 - Hooks)
const [number, setNumber] = useState(10); // useState(기본값 설정);
  > Counter.js
    ** import React, { useState } from 'react'; // React 패키지에서 useState 함수를 불러온다.
    function Counter() {
      const [number, setNumber] = useState(0); // useState를 사용하면 배열을 반환하며, 첫번째 원소는 현재 값, 두번째 원소는 값을 변경하는 함수로 사용할 것이다.
      const increase = () => {
        // setNumber(number + 1);
        setNumber(prevNumber => prevNumber + 1); // 함수형 업데이트 (성능 최적화)
      }
      const decrease = () => {
        setNumber(number - 1);
      }
      retrun (
        <div>
          <h1>{number}</h1>
          <button onClick={increase}>+1</button>
          <button onClick={decrease}>-1</button>
        </div>
      )
    }

  > App.js
    function App () {
      return (
        <Counter />
      )
    }

-- useState (input 상태 관리)
  > InputSample.js
    import React, { useState } from 'react';
    function InputSample() {
      const [text, setText] = useState('');
      const onChange = (e) => {
        setText(e.target.value);
      }
      const onReset = () => {
        setText('');
      }
      retrun (
        <div>
          <input onChange={onChange} value={text}/>
          <button onClick={onReset}>초기화</button>
          <b>값 : </b>
          {text}
        </div>
      )
    }

  > 여러개의 input 관리
  function InputSample(){
    const [inputs, setInputs] = useState({
      name : '',
      boyFriend : ''
    });
    const { name, boyFriend } = inputs;
    const onChange = (e) => {
      const {name, value} = e.target;
      setInputs({
        ...inputs,
        [name] : value,
      });
    const onReset = () => {
      setInputs({
        name : '',
        boyFriend : ''
      })
    }
  }
  // 객체 상태를 업데이트 할 때는 ...(스프레드 문법)을 사용해서 객체를 복사하고 난 뒤 상태를 바꿔줘야한다.

-- useRef (특정 DOM 선택하기)
  import React, { useState, useRef } from 'react';
  const nameInput = useRef();
  const onReset = () => {
    setInput({ .. });
    nameInput.current.focus();
  }
  <input ref={nameInput}>
  // 초기화 버튼 클릭시 ref 설정한 input 으로 포커스 이동

-- 배열 렌더링 하기
  