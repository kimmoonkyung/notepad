/***************************************************************************************/
// 스프링 부트에서는 잭슨라이브러리를 기본적으로 내장
// 따로 설정하지 않는다면 객체를 리턴할 땐 자동적으로 제이슨으로 변환되어 리턴된다.

// 주소가 겹치면 스프링부트는 실행되지 않는다. (메소드 단위)
// 컨트롤러 단위로는 실행된다.

*application.properties (main/resource/)
    스프링 부트 프로젝트에 추가 된 라이브러리들의 설정들을 관리하는 곳
        ex) spring.datasource.url=jdbc:mysql://localhost:3306/study?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul
            spring.datasource.username=
            spring.datasource.password=

DI의 기본 핵심은 싱글톤,
    ...
    
/***************************************************************************************/


/***************************************************************************************/
JPA
    ORM ( Object Relational Mapping )으로, RDB 데이터베이스의 정보를 객체지향으로 손쉽게
활용 할 수 있도록 도와 주는 도구.
    Object(자바객체)와 Relation(관계형 데이터베이스) 둘 간의 맵핑을 통해서 보다
손쉽게 적용 할 수 있는 기술을 제공.
    또한 쿼리에 집중하기 보다는 객체에 집중 함으로써 조금 더 프로그래밍 적으로 많이 활용
할 수 있다.

    Entity
        JPA에서는 테이블을 자동으로 생성해주는 기능 존재.
    DB TABLE === JPA ENTITY

    연관 관계 설정
        관계     /   Annotation
        일대일   /   @OneToOne
        일대다   /   @OneToMany
        다대일   /   @ManyToOne
        다대다   /   @ManyToMany
        Long이 아니라 객체로 연결한다.
    
    // LAZY = 지연로딩 , EAGER = 즉시로딩
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "item")
    // LAZY = select * from ITEM where id = ?
        // 변수에 대해서 겟 메소드를 호출 하지 않는 이상 연관 관계가 설정 된 테이블에 대해서 셀렉하지 않겠다.
    // EAGER = JOIN >> item.id = orderDetail.id
        // 즉시 모든 것을 다 로딩 하겠다, 연관 관계가 설정 된 모든 테이블에 대해 조인이 일어난다.
        // 1 : 1(@OneToOne)이나 @ManyToOne에 대해서 한건만 존재할 때 사용

/***************************************************************************************/


/***************************************************************************************/
TDD
    

/***************************************************************************************/


/***************************************************************************************/
@Annotation
    > Lombok
        // 롬복은 플러그인도 설치해야 한다.
        // 설치 후 활성화 까지. (컴파일러 - Annotation Processor)
        @Data
            자동으로 기본 생성자와, 게터세터 등 다양한 메소드 (재정의도) 생성해준다.
            인텔리제이에서 Structure 탭을 보면 @Data 어노테이션 추가시의 마법을 볼 수 있음.

        @Table
            실제 DB테이블의 이름을 명시 (테이블명과 엔티티명이 동일하면 선언하지 않아도 됨.)
        @Entity
            해당 클래스가 Entity임을 명시
            Jpadml Entity 및 column을 자동으로 camelCase로 DB의 snake_case에 매핑 해준다.
            @Id
                Index primary key를 명시
            @GeneratedValue
                Primary key 식별키의 전략 설정
            @Column
                실제 DB Column의 이름을 명시
        @NoArgsConstructor
            기본 생성자를 생성해주는 어노테이션

        @AllArgsConstructor
            모든 아규먼트를 가지는 변수에 대해서 생성자를 추가
            생성자 자동 생성 어노테이션!
        @ToString
            @Data로 생성된 투스트링을 제외한다.
            ex) @ToString(exclude = {"필드1", "필드2"})


    @Repository
        따로 쿼리문을 작성하지 않아도 기본적인 CRUD 내장
        @Repository interface UserRepository extends JpaRepository<User, Long>{}
            > 제네릭으로 연결할 엔티티와, 키의 타입을 선언한다.

    > @RestController
        @GetMapping
        @PostMapping
        @PatchMapping
        @DeleteMapping

    > @CrossOrigin

/***************************************************************************************/


-- todo-server
    gradle 설정 (build.gradle)
        plugin
            id 'org.springframework.boot' version '2.4.2'
            id 'io.spring.dependency-management' version('1.0.11.RELEASE')
            id 'java'
        dependencies
            implementation('org.springframework.boot:spring-boot-starter-data-rest')
            implementation('org.springframework.boot:spring-boot-starter-data-jpa')
            runtimeOnly('com.h2database:h2')
            annotationProcessor('org.projectlombok:lombok')
            compileOnly('org.projectlombok:lombok')
            // 롬복은 플러그인도 설치해야 한다.
            // 설치 후 활성화 까지. (컴파일러 - Annotation Processor)
            testImplementation('org.springframework.boot:spring-boot-starter-test')
        test
            useJUnitPlatform()


    Entity(model) 생성
        @Data
        @Entity
        @NoArgsConstructor
        @AllArgsConstructor
            @Column

    Repository 생성
        @Repository
        public interface TodoRepository extends JpaRepository<TodoEntity, Long> {
            // JpaRepository 를 상속 하고 제네릭으로
            // 앞은 데이터베이스 테이블과 연결 될 객체인 엔티티,
            // 뒤는 해당 객체의 id의 해당하는 필드 타입을 넣어준다.
        }
    
    Service 생성
        @Service
        @AllArgsConstructor
        public class TodoService {
            private final TodoRepository todoRepository;
    
    Controller 생성
        @Slf4j // log.info("STRING")
        @CrossOrigin
        @AllArgsConstructor
        @RestController
        @RequestMapping("/")
        public class TodoController {
            private final TodoService todoService;

    TodoServerApplication
        @SpringBootApplication
        public class TodoServerApplication {
            public static void main(String[] args) {
                System.out.println("NICE 9OOD");
                SpringApplication.run(TodoServerApplication.class, args);
            }
        }
    
    Test 코드 작성
    // Mock 사용 이유
    // 외부 시스템에 의존하지 않고 자체 테스트를 실행 할 수 있어야 하기 때문.
    // 유닛 테스트는 네트워크나 DB가 연결 되지 않는다 하여 테스트가 실행이 불가하면 안 되기 때문에.
    // 또 실제 DB를 사용하게 되면 테스트 내용이 그대로 반영 되기 때문.
        TodoService [ Opt + Enter ] > 테스트 생성
            import static org.mockito.Mockito.when;
            import static org.mockito.ArgumentMatchers.any;

            @ExtendWith(MockitoExtension.class)
            class TodoServiceTest
                @Mock
                private TodoRepository todoRepository;

                @InjectMocks
                private TodoService todoService;
        
        TodoController
            @WebMvcTest(TodoController.class)
            class TodoControllerTest {

                @Autowired
                MockMvc mvc;

                @MockBean
                TodoService todoService;

                private TodoEntity expected;


-- admin 페이지 만들기
    gradle 설정 (build.gradle)
        dependencies
            compile('org.springframework.boot:spring-boot-starter-data-jpa')
            compile('mysql:mysql-connector-java')
            compile 'org.projectlombok:lombok:1.18.10'
            annotationProcessor 'org.projectlombok:lombok:1.18.10'